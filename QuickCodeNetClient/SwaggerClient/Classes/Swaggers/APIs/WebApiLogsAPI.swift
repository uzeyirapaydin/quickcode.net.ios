//
// WebApiLogsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class WebApiLogsAPI {
    /**

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func webApiLogsDelete(body: WebApiLogs, completion: @escaping ((_ data: ResponseOfBoolean?,_ error: Error?) -> Void)) {
        webApiLogsDeleteWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/WebApiLogs/Delete
     - 

     - examples: [{contentType=application/json, example={
  "code" : 0,
  "message" : "message",
  "value" : true
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<ResponseOfBoolean> 
     */
    open class func webApiLogsDeleteWithRequestBuilder(body: WebApiLogs) -> RequestBuilder<ResponseOfBoolean> {
        let path = "/api/WebApiLogs/Delete"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResponseOfBoolean>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter logId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func webApiLogsGetItem(logId: Int? = nil, completion: @escaping ((_ data: ResponseOfWebApiLogs?,_ error: Error?) -> Void)) {
        webApiLogsGetItemWithRequestBuilder(logId: logId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/WebApiLogs/GetItem
     - 

     - examples: [{contentType=application/json, example={
  "code" : 0,
  "message" : "message",
  "value" : ""
}}]
     - parameter logId: (query)  (optional)

     - returns: RequestBuilder<ResponseOfWebApiLogs> 
     */
    open class func webApiLogsGetItemWithRequestBuilder(logId: Int? = nil) -> RequestBuilder<ResponseOfWebApiLogs> {
        let path = "/api/WebApiLogs/GetItem"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "LogId": logId?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<ResponseOfWebApiLogs>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func webApiLogsInsert(body: WebApiLogs, completion: @escaping ((_ data: ResponseOfLong?,_ error: Error?) -> Void)) {
        webApiLogsInsertWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/WebApiLogs/Insert
     - 

     - examples: [{contentType=application/json, example={
  "code" : 0,
  "message" : "message",
  "value" : 6
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<ResponseOfLong> 
     */
    open class func webApiLogsInsertWithRequestBuilder(body: WebApiLogs) -> RequestBuilder<ResponseOfLong> {
        let path = "/api/WebApiLogs/Insert"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResponseOfLong>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func webApiLogsList(body: ListRequest, completion: @escaping ((_ data: ResponseOfListOfWebApiLogs?,_ error: Error?) -> Void)) {
        webApiLogsListWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/WebApiLogs/List
     - 

     - examples: [{contentType=application/json, example={
  "code" : 0,
  "message" : "message",
  "value" : [ {
    "hostName" : "hostName",
    "hostIp" : "hostIp",
    "deviceOs" : "deviceOs",
    "responseData" : "responseData",
    "deviceVersion" : "deviceVersion",
    "deviceId" : "deviceId",
    "versionCode" : "versionCode",
    "requestDatetime" : "requestDatetime",
    "firebaseId" : "firebaseId",
    "clientIp" : "clientIp",
    "controllerName" : "controllerName",
    "logId" : 1,
    "requestData" : "requestData",
    "actionName" : "actionName",
    "httpStatusCode" : "httpStatusCode",
    "elapsedTime" : 6,
    "logDatetime" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "hostName" : "hostName",
    "hostIp" : "hostIp",
    "deviceOs" : "deviceOs",
    "responseData" : "responseData",
    "deviceVersion" : "deviceVersion",
    "deviceId" : "deviceId",
    "versionCode" : "versionCode",
    "requestDatetime" : "requestDatetime",
    "firebaseId" : "firebaseId",
    "clientIp" : "clientIp",
    "controllerName" : "controllerName",
    "logId" : 1,
    "requestData" : "requestData",
    "actionName" : "actionName",
    "httpStatusCode" : "httpStatusCode",
    "elapsedTime" : 6,
    "logDatetime" : "2000-01-23T04:56:07.000+00:00"
  } ]
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<ResponseOfListOfWebApiLogs> 
     */
    open class func webApiLogsListWithRequestBuilder(body: ListRequest) -> RequestBuilder<ResponseOfListOfWebApiLogs> {
        let path = "/api/WebApiLogs/List"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResponseOfListOfWebApiLogs>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func webApiLogsTotalItemCount(completion: @escaping ((_ data: ResponseOfInteger?,_ error: Error?) -> Void)) {
        webApiLogsTotalItemCountWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/WebApiLogs/TotalItemCount
     - 

     - examples: [{contentType=application/json, example={
  "code" : 0,
  "message" : "message",
  "value" : 6
}}]

     - returns: RequestBuilder<ResponseOfInteger> 
     */
    open class func webApiLogsTotalItemCountWithRequestBuilder() -> RequestBuilder<ResponseOfInteger> {
        let path = "/api/WebApiLogs/TotalItemCount"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResponseOfInteger>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func webApiLogsUpdate(body: WebApiLogs, completion: @escaping ((_ data: ResponseOfBoolean?,_ error: Error?) -> Void)) {
        webApiLogsUpdateWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/WebApiLogs/Update
     - 

     - examples: [{contentType=application/json, example={
  "code" : 0,
  "message" : "message",
  "value" : true
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<ResponseOfBoolean> 
     */
    open class func webApiLogsUpdateWithRequestBuilder(body: WebApiLogs) -> RequestBuilder<ResponseOfBoolean> {
        let path = "/api/WebApiLogs/Update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResponseOfBoolean>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
